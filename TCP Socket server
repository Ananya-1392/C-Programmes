#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <arpa/inet.h>
#define MAX 80
#define PORT 8080
#define SA struct sockaddr


// Function to calculate factorial
int factorial(int n)
{
	if (n == 0)  
    	return 1;  
  	else  
    	return(n * factorial(n-1)); 
}
// Function designed for chat between client and server.
void func(int connfd)
{
	char buff[MAX];
	int n;
	// infinite loop for chat
	for (;;) {
		bzero(buff, MAX);

		// read the message from client and copy it in buffer
		read(connfd, buff, sizeof(buff));
		// print buffer which contains the client contents
		printf("From client: %s\t To client : ", buff);
		bzero(buff, MAX);
		n = 0;
		// copy server message in the buffer
		while ((buff[n++] = getchar()) != '\n')
			;

		// and send that buffer to client
		write(connfd, buff, sizeof(buff));

		// if msg contains "Exit" then server exit and chat ended.
		if (strncmp("exit", buff, 4) == 0) {
			printf("Server Exit...\n");
			break;
		}
	}
}

// Driver function
int main()
{
	FILE *fp;
	
	int sockfd, connfd, len;
	struct sockaddr_in servaddr, cli;
	char buffer[50];

	// socket create and verification
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) {
		printf("socket creation failed...\n");
		exit(0);
	}
	else
		printf("Socket successfully created..\n");
	bzero(&servaddr, sizeof(servaddr));

	// assign IP, PORT
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);

	// Binding newly created socket to given IP and verification
	if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
		printf("socket bind failed...\n");
		exit(0);
	}
	else
		printf("Socket successfully binded..\n");

	while(1)
	{
		// Now server is ready to listen and verification
		if ((listen(sockfd, 5)) != 0) {
			printf("Listen failed...\n");
			exit(0);
		}
		else
			printf("Server listening..\n");
		len = sizeof(cli);

		// Accept the data packet from client and verification
		connfd = accept(sockfd, (SA*)&cli, &len);
		if (connfd < 0) {
			printf("server accept failed...\n");
			exit(0);
		}
		else
			printf("server accept the client...\n");

		// Function for chatting between client and server
		// func(connfd);

		printf("Opening the data.txt\n");
		sleep(1);
		fp = fopen("data.txt","w") ; 

		for(int i = 0; i < 5; i++)
		{
			bzero(buffer, 50);
			printf("Receiving data from client:\n");
			sleep(1);
			recv(connfd, &buffer, 50, 0);
			printf("from client: %s\n", buffer);
			int num = atoi(buffer);
			num = factorial(num);
			printf("Calculating factorial now...\n");
			sleep(1);
			bzero(buffer, 50);
			char string[20];
			sprintf(string, "%d", num);
			strcpy(buffer, string);
			printf("Sending data to client\n");
			send(connfd, &buffer, 50, 0);
			fprintf(fp, "The factorial is: %d.\n", num);
			
		}
		fprintf(fp, "The IP Addr is %s and Port Number is %d\n", inet_ntoa(cli.sin_addr), (int) ntohs(cli.sin_port));
		fclose(fp);
	}

	// After chatting close the socket
	sleep(1);
	printf("Server now closing.....\n");
	
	close(sockfd);
}
